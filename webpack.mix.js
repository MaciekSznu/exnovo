let mix = require("laravel-mix");

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for your application, as well as bundling up your JS files.
 |
 */

mix
  .options({
    processCssUrls: false,
  })
  .js("scripts/index.js", "dist/")
  .js("scripts/contact.js", "dist/")
  .sass("styles/home/style.scss", "dist/style.css")
  .sass("styles/o-nas/o-nas.scss", "dist/o-nas.css")
  .sass("styles/kredyty/kredyty.scss", "dist/kredyty.css")
  .sass("styles/uslugi/uslugi.scss", "dist/uslugi.css")
  .sass("styles/oferty/oferty.scss", "dist/oferty.css")
  .sass("styles/pierwotny/pierwotny.scss", "dist/pierwotny.css")
  .sass("styles/single-pierwotny/single-pierwotny.scss", "dist/single-pierwotny.css")
  .sass("styles/single-blog/single-blog.scss", "dist/single-blog.css")
  .sass("styles/single-offer/single-offer.scss", "dist/single-offer.css")
  .sass("styles/blog/blog.scss", "dist/blog.css")
  .sass("styles/kontakt/kontakt.scss", "dist/kontakt.css")
  .sass("styles/specjalista/specjalist.scss", "dist/specjalist.css")
  .sass("styles/rodo/rodo.scss", "dist/rodo.css")
  .sass("styles/formularz/form.scss", "dist/form.css");

// .minify('dist/app.css');

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
